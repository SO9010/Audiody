import { Palette, ProgressIndicator, TimePickerPopup, HorizontalBox, VerticalBox, ScrollView } from "std-widgets.slint";
import { BookItem, CoverImage } from "book.slint";

export global AudioState {
    in-out property <bool> logged-in: true;
    in-out property <bool> playing: false;
    in-out property <bool> paused: true;
    in-out property <float> timing: 0.0;
    in-out property <float> playback_update: 0.01;
    in-out property <string> page-name: "Audiody";
    in-out property <float> speed: 1.0;

    in-out property <[BookItem]> home-page-books: [];

    in-out property <[BookItem]> search-libi: [];
    in-out property <[BookItem]> search-yt: [];
    in-out property <BookItem> book-view;

    in-out property <BookItem> now-playing;

    // 0 for home 1 for search, 2 for books, 3 for settings, 4 for now playing, 5 for book-view
    // Playback control
    callback toggle-pause();
    callback skip-forward();
    callback skip-backward();
    callback change-speed();
    callback queue-next-track();
    callback playing-action();

    // Paging
    callback go-to-previous-page();
    callback add-previous-page(int);
    in-out property <int> current-view: 0;

    callback on-search-clicked(string);
    callback on-book-view(string, string);

    /// Book, Chapter, URL
    callback resume(string);
    callback chapter-download-and-play(string, int, string);
    callback chapter-download(string, int, string);
}

export component controls inherits Rectangle {
    HorizontalBox {
        alignment: center;
        spacing: 20px;
        padding: 5px;

        Rectangle {
            height: 45px;
            width: 45px;
            touch1 := TouchArea {
                clicked => {
                    AudioState.skip-backward();
                }
            }

            Image {
                source: @image-url("../img/skip-previous-svgrepo-com.svg");
                colorize: touch1.pressed ? Palette.selection-background : Palette.foreground;
                height: 35px;
                width: 35px;
            }
        }

        Rectangle {
            height: 45px;
            width: 45px;
            touch2 := TouchArea {
                clicked => {
                    AudioState.toggle-pause();
                    AudioState.paused = !AudioState.paused;
                }
            }

            Image {
                source: AudioState.paused ? @image-url("../img/play-svgrepo-com.svg") : @image-url("../img/pause-svgrepo-com.svg");
                colorize: touch2.pressed ? Palette.selection-background : Palette.foreground;
                height: 45px;
                width: 45px;
            }
        }

        Rectangle {
            height: 45px;
            width: 45px;
            touch3 := TouchArea {
                clicked => {
                    AudioState.skip-forward()
                }
            }

            Image {
                source: @image-url("../img/skip-next-svgrepo-com.svg");
                colorize: touch3.pressed ? Palette.selection-background : Palette.foreground;
                height: 35px;
                width: 35px;
            }
        }
    }
}

export component PlayingBar inherits Rectangle {
    background: Palette.alternate-background;
    border-radius: 15px;
    HorizontalLayout {
        Rectangle {
            clip: true;
            border-top-left-radius: 15px;
            max-width: 50px;
            Image {
                height: 50px;
                image-fit: ImageFit.fill;
                source: AudioState.now-playing.image;
            }
        }

        Rectangle {
            controls {
                x: -22.5px;
            }
        }
    }
}

export component PlayingWindow inherits Rectangle {
    border-top-left-radius: 15px;
    border-radius: 0px;
    background: Palette.alternate-background;
    VerticalBox {
        padding: 10px;
        Rectangle {
            clip: true;
            border-radius: 5px;
            height: root.width - 20px;
            Image {
                height: root.width - 20px;
                image-fit: ImageFit.contain;
                source: AudioState.now-playing.image;
            }
        }

        Text {
            text: AudioState.now-playing.title;
            font-size: 25px;
            horizontal-alignment: center;
            wrap: word-wrap;
        }

        Rectangle { }

        HorizontalLayout {
            padding: 0px;
            padding-bottom: 7.5px;
            Rectangle {
                height: 45px;
                width: 45px;
                touch1 := TouchArea {
                    clicked => {
                        time-picker.show();
                    }
                }

                time-picker := TimePickerPopup {
                    width: 360px;
                    height: 524px;
                    close-on-click: false;
                    y: -450px;
                    canceled => {
                        time-picker.close();
                    }

                    accepted(time) => {
                        debug(time);
                        time-picker.close();
                    }
                }

                Image {
                    source: @image-url("../img/moon-fog-svgrepo-com.svg");
                    colorize: touch1.pressed ? Palette.selection-background : Palette.foreground;
                    height: 45px;
                    width: 45px;
                }
            }

            Rectangle {
                controls {
                    y: -2.43px;
                }
            }

            Rectangle {
                height: 45px;
                width: 45px;
                Text {
                    text: AudioState.speed + "x";
                    font-size: 25px;
                    font-weight: 600;
                    color: touch4.pressed ? Palette.selection-background : Palette.foreground;
                }

                touch4 := TouchArea {
                    clicked => {
                        if (AudioState.speed < 2.0) {
                            AudioState.speed += 0.25;
                        } else {
                            AudioState.speed = 0.75;
                        }
                        AudioState.change-speed();
                    }
                }
            }
        }
    }
}

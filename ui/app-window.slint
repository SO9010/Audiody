import { Button, VerticalBox, TimePickerPopup, Palette, HorizontalBox, StandardListView, StandardTableView, ScrollView, ListView } from "std-widgets.slint";

/*

    We want to have differnt sections:
        - Home page:
            - Continue listening,
            - Downloads,
            - Short lists,
            - Recemntly played
        - Search/discover
        - Books
        - Settings
            - Youtube login, drive login, download location
        - Now playing location
            - Volume
            - Night timer
            - Time left
            - Speed up/down
            - transcipt   
        - Book view
        - Bookmarks
*/

// Should add rating too!
// Do some matching for the genres, and if it is a genre then return genres!
@rust-attr(derive(serde::Serialize, serde::Deserialize))
export struct BookItem  {
    title: string,
    image-url: string,
    chapter: int,
    time : int,
    now-playing: bool,
}


export component CoverImage inherits Rectangle {
    width: 250px;
    height: 250px;
    Rectangle {
        clip: true;
        border-radius: 5px;
        Image {
            width: 100%;
            height: 100%;
            image-fit: ImageFit.fill;
            source: @image-url("img/republic2_1310.jpg");
        }
    }
}

export component controls inherits Rectangle {
    callback skip-forward;
    callback skip-backward;
    callback pause-play;
    in-out property <bool> playing;

    HorizontalBox {
        alignment: center;
        spacing: 20px;
        padding: 5px;
        Rectangle {
            height: 45px;
            width: 45px;
            touch1 := TouchArea {
                clicked => { root.pause-play() }
            }
            Image {
                source: @image-url("img/skip-previous-svgrepo-com.svg");
                colorize: touch1.pressed ? Palette.selection-background : Palette.foreground;
                height: 35px;
                width: 35px;
            }
        }
        Rectangle {
            height: 45px;
            width: 45px;
            touch2 := TouchArea {
                clicked => {
                    root.pause-play();
                    root.playing = !root.playing;
                }
            }
            Image {
                source: root.playing ? @image-url("img/play-svgrepo-com.svg") : @image-url("img/pause-svgrepo-com.svg");
                colorize: touch2.pressed ? Palette.selection-background : Palette.foreground;
                height: 45px;
                width: 45px;
            }
        }
        Rectangle {
            height: 45px;
            width: 45px;
            touch3 := TouchArea {
                clicked => { root.skip-forward() }
            }
            Image {
                source: @image-url("img/skip-next-svgrepo-com.svg");
                colorize: touch3.pressed ? Palette.selection-background : Palette.foreground;
                height: 35px;
                width: 35px;
            }
        }
    }
}

export component PlayingBar inherits Rectangle {
    in-out property <bool> playing;

    background: Palette.alternate-background;
    border-radius: 15px;
    HorizontalLayout {
        Rectangle {
            clip: true;
            border-top-left-radius: 15px;
            max-width: 50px;
            Image {
                height: 50px;
                image-fit: ImageFit.fill;
                source: @image-url("img/republic2_1310.jpg");
            }
        }
        Rectangle {
            controls {
                playing: root.playing;
                x: -25px;
            }
        }
    }
}
export component PlayingWindow inherits Rectangle {
    in-out property <bool> playing;
    in property <string> Name;
    in property <string> Description;
    in-out property <float> timeing;
    timeing: 100.0;

    Rectangle {
        border-top-left-radius: 15px;
        border-radius: 0px;
        background: Palette.alternate-background;
        VerticalBox {
            padding: 10px;
            Rectangle {
                clip: true;
                border-radius: 5px;
                height: root.width -20px ;
                Image {
                    height: root.width -20px ;
                    image-fit: ImageFit.contain;
                    source: @image-url("img/republic2_1310.jpg");
                }
            }
            // Placeholder for the time
            Rectangle {
                border-radius: 15px;
                height: 4px;
                background: Palette.background;
                Rectangle {
                    x :0px;
                    border-radius: 4px;
                    width: root.timeing * 1px;
                    background: Palette.foreground;
                }
            }
            Text {
                text: "Plato The Republic";
                font-size: 25px;
                horizontal-alignment: center;

                //text: root.Name;
            }
            Text {
                text: "Plato The Republic this is a description that describes the audio book, I should be scrolable!";
                font-size: 15px;
                wrap: word-wrap;
                horizontal-alignment: center;
                
                //text: root.Name;
            }
            Rectangle {}
            HorizontalLayout {
                padding: 0px;
                Rectangle {
                    height: 45px;
                    width: 45px;
                    touch1 := TouchArea {
                        clicked => {
                            time-picker.show();
                        }
                    }
                    time-picker := TimePickerPopup {
                        width: 360px;
                        height: 524px;
                        close-on-click: false;
                        y: -450px;
                        canceled => {
                            time-picker.close();
                        }
                    
                        accepted(time) => {
                            debug(time);
                            time-picker.close();
                        }
                    }
                    Image {
                        source: @image-url("img/moon-fog-svgrepo-com.svg");
                        colorize: touch1.pressed ? Palette.selection-background : Palette.foreground;
                        height: 45px;
                        width: 45px;
                    }
                }
                Rectangle {
                    controls {
                        y: -2.43px;
                        playing: root.playing;
                    }
                }
                Rectangle {
                    height: 45px;
                    width: 45px;
                    Text {
                        text: "1x";
                        font-size: 25px;
                        font-weight: 600;
                        color: touch2.pressed ? Palette.selection-background : Palette.foreground;
                    }
                    touch2 := TouchArea {
                    }
                }
            }

        }
    }
}

export component TopBar inherits Rectangle {
    HorizontalBox {
        padding: 7.5px;
        Text {
            horizontal-alignment: TextHorizontalAlignment.left;
            text: "Audiody";
            font-size: 25px;
            font-weight: 500;
            color: Palette.foreground;
        }
        Image {
            horizontal-alignment: right;
            image-fit: ImageFit.contain;
            width: 40px;
            height: 40px;
            source: @image-url("img/search-svgrepo-com.svg");
            touch := TouchArea {}
            colorize: touch.pressed ? Palette.selection-background : Palette.foreground;
        }
    }
        
}

export component NavBar inherits Rectangle {
    in-out property <bool> hidden;

    Rectangle {
        background: Palette.alternate-background;
        HorizontalBox {
            alignment: LayoutAlignment.center;
            spacing: 30px;
            Image {
                height: 50px;
                width: 50px;
                source: @image-url("img/home-1-svgrepo-com.svg");
                colorize: touch1.pressed ? Palette.selection-background : Palette.foreground;
                touch1 := TouchArea {
                }
            }Image {
                    height: 50px;
                    width: 50px;
                    source: @image-url("img/book-2-svgrepo-com.svg");
                    colorize: touch2.pressed ? Palette.selection-background : Palette.foreground;
                    touch2 := TouchArea {}
            }Image {
                    height: 50px;
                    width: 50px;
                    source: @image-url("img/stack-apps-layers-svgrepo-com.svg");
                    colorize: touch3.pressed ? Palette.selection-background : Palette.foreground;
                    touch3 := TouchArea {}
            }Image {
                    height: 50px;
                    width: 50px;
                    source: @image-url("img/settings-svgrepo-com.svg");
                    colorize: touch4.pressed ? Palette.selection-background : Palette.foreground;
                    touch4 := TouchArea {}
            }
        }
    }
}

export component AppWindow inherits Window {
    title: "Audiody";
    background: Palette.background;
    in-out property <bool> playing: false;
    in-out property <float> timeing: 100.0;
    in property <[BookItem]> book-model: [
        {
            title: "The Republic",
            image-url: "img/republic2_1310.jpg",
            chapter: 1,
            time: 3600,
            now-playing: true
        },
        {
            title: "Pride and Prejudice",
            image-url: "img/republic2_1310.jpg",
            chapter: 5,
            time: 7200,
            now-playing: false
        },
        {
            title: "The Art of War",
            image-url: "img/republic2_1310.jpg", 
            chapter: 2,
            time: 1800,
            now-playing: false
        }
    ];
    
    callback show_playing_popup;

    show_playing_popup => { playing_popup.show(); }

    playing_popup := PopupWindow {
        x: 40px;
        y: 100px;
        width: min(playing_popup_layout.preferred-width, root.width - 80px);

        Rectangle {
            background: Palette.background;
            border-color: Palette.border;
            border-width: 1px;
        }

        playing_popup_layout := Dialog {
            height:100%; width: 100%;

            playing_popup_text := Text {
                text: "Some items are not done, are you sure you wish to quit?";
                wrap: word-wrap;
            }

        }
    }

    HorizontalBox {
        padding: 0px;
        spacing: 0px;
            VerticalBox {
            min-width: 350px;
            min-height: 600px;
            padding: 0px;
            spacing: 0px;

            TopBar {
                height: 55px;
            }
            if root.width < 750px : Rectangle {
                height: 3px;
                Rectangle {
                    border-radius: 15px;
                    height: 4px;
                    background: Palette.alternate-background;
                    Rectangle {
                        x :0px;
                        border-radius: 4px;
                        width: root.timeing * 1px;
                        background: Palette.alternate-foreground;
                    }
                }
            }
            Rectangle {
                // This is where the views will go!
                min-height: 200px;
                ScrollView {
                    ListView {
                        for book in root.book-model: CoverImage {
                            // You can bind book properties here
                            // For example:
                            // image-source: book.image-url
                        }
                    }
                
                ScrollView {
                    }
                }
            }
            if root.width < 750px : Rectangle {
                height: 50px;
                // Placeholder for timebar
                // Placeholder for the time
                PlayingBar {
                    playing: root.playing;
                    border-bottom-left-radius: 0px;
                    border-bottom-right-radius: 0px;
                }                
            }

            NavBar {

            }
        }
        if root.width >= 750px : Rectangle {
            PlayingWindow {
                playing: root.playing;
                max-width: 350px;
            }
        }
    }
    
}
